-- Example of the syntax for TablaM

-- This is a line comment

--! This is a doc, and it support *markdown*
--!
--! ```tablam
--! let a = 1
--! ```
--!
--! ```sql
--! SELECT * FROM table
--! ```

-- 1. Literals & Scalars
-- Each section also gives the type like Numbers: Type

-- Integer: Int (64 bits)
1
 
1_000 -- can use _ for separate values on all numbers

-- The default floating point number!
-- Decimal: Dec 64 bit Decimals (base 10)
1.0
1_000.0d    -- with explicit suffix

-- Float: Float 64 bit floats (base 2, requiered explicit suffix)
1.0f

-- Percent: Percent
10%

--- Booleans : Bool
true
false

--- Bits : Bit
0b
1_00100_001b

--- Strings: Str (Utf-8 encoded)

"hello" -- Strings are enclosed with quotes
'hello' -- both '' or "".

"hello it's you" --so you can embed easily the opposite quote

"""
A long text
""" --- and triple quotes allow to enter longer text

"üçé" -- unicode can be used!

--- Dates, all ISO 8601 encoded

-- DateTime: DateTime (with TimeZone)
d'2020-02-02'
d"2020-02-02"
dt"2020-02-02T08:00:00+05:00"
dt"2020-02-02T08:00:00" -- Is a shortcut for above, imply LocalTime

t"08:00:00" -- Just time, 24 hours

-- 2. Operators

--- Logical
1 = 1 -- = true
1 <> 1 -- = false

1 > 2 -- = false
1 >= 2 -- = false

1 < 2 -- = true
1 <= 2 -- = true

true and false -- = true
not true -- = false

--- Math

1 + 1 -- 2
8 - 1 -- 7
10 * 2 -- 20
33 / 2 -- 16.5 with Dec division
div(33, 2) -- 16 with Int division

20 * 10% -- similar to 20 * 0.10 or 20 * 10/100

-- You can use unicode math chars for multiplication/division, 
-- x √ó or / √∑, are equivalent!
10 √ó 2 -- 20
33 √∑ 2 -- 16.5 with Dec division

-- Enforce precedence with parentheses
(1 + 3) * 2  -- 8

-- Declarations

let x := 1 -- immutable
var x := 1 -- mutable

--- Control flow

if true do
   1
else 
   2
end