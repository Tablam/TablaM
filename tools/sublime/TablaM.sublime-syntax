%YAML 1.2
---
# Generate this with https://crates.io/crates/sbnf?
# Coordinate this with parser/lexer
name: TablaM
file_extensions:
  - tbm
scope: source.tbm

variables:
  dec_literal: '[0-9](?:[0-9_])*'

contexts:
  # The prototype context is prepended to all contexts but those setting
  # meta_include_prototype: false.
  prototype:
    - include: comments

  main:
    # The main context is the initial starting point of our syntax.
    # Include other contexts from here (or specify them directly).
    - include: keywords
    - include: booleans
    - include: numbers
    - include: strings

  keywords:
    - match: '\b(let|var)\b'
      comment: keyword for declaring bindings
      scope: storage.type.tbm

    - match: '\b(if|else|for|while|do|end)\b'
      scope: keyword.control.tbm

    - match: <\=|>\=|\=|<|>|<>
      scope: keyword.operator.comparison.tbm

    - match: \+|\-|\*|ร|/|รท
      scope: keyword.operator.arithmetic.tbm

    - match: \b(and|in|not|or)\b
      comment: keyword operators that evaluate to true or false
      scope: keyword.operator.logical.tbm

  booleans:
    - match: '\b(true|false)\b'
      scope: constant.language.source.tbm

  numbers:
    # Binary Float
    - match: '\b(-)?[0-9.]+f\b'
      scope: constant.numeric.source.tbm
    # Decimal
    - match: '\b(-)?[0-9.]+d\b'
      scope: constant.numeric.source.tbm
    - match: '\b(-)?[0-9.]+\b'
      scope: constant.numeric.source.tbm

  strings:
    # Strings begin and end with quotes, and use backslashes as an escape
    # character
    - match: '"'
      scope: punctuation.definition.string.begin.source.tbm
      push: double_quoted_string

  double_quoted_string:
    - meta_scope: string.quoted.double.source.tbm
    - match: '\\.'
      scope: constant.character.escape.source.tbm
    - match: '"'
      scope: punctuation.definition.string.end.source.tbm
      pop: true

  comments:
    # Comments begin with a '--' and finish at the end of the line.
    - match: '--'
      scope: punctuation.definition.comment.source.tbm
      push:
        # This is an anonymous context push for brevity.
        - meta_scope: comment.line.double-slash.source.tbm
        - match: $\n?
          pop: true
